//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 15.0.27428.2043
// 
namespace Client.CRMServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CRMServiceReference.ICRMService")]
    public interface ICRMService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/AddCustomer", ReplyAction="http://tempuri.org/ICRMService/AddCustomerResponse")]
        System.Threading.Tasks.Task<Common.Dtoes.CustomerDto> AddCustomerAsync(Common.Dtoes.CustomerDto customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/AddFullLine", ReplyAction="http://tempuri.org/ICRMService/AddFullLineResponse")]
        System.Threading.Tasks.Task<bool> AddFullLineAsync(Common.Dtoes.LineDto line, Common.Dtoes.PackageIncludeDto packageInclude, Common.Dtoes.SelectedNumberDto selectedNumber, Common.Dtoes.CustomerDto customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/GetAllCustomers", ReplyAction="http://tempuri.org/ICRMService/GetAllCustomersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Common.Dtoes.CustomerDto>> GetAllCustomersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/GetCustomersIds", ReplyAction="http://tempuri.org/ICRMService/GetCustomersIdsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<int>> GetCustomersIdsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/GetCustomerTypes", ReplyAction="http://tempuri.org/ICRMService/GetCustomerTypesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Common.Dtoes.CustomerTypeDto>> GetCustomerTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/GetLineForCustomer", ReplyAction="http://tempuri.org/ICRMService/GetLineForCustomerResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Common.Dtoes.LineDto>> GetLineForCustomerAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/GetPackages", ReplyAction="http://tempuri.org/ICRMService/GetPackagesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Common.Dtoes.PackageDto>> GetPackagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/GetSelectedNumbers", ReplyAction="http://tempuri.org/ICRMService/GetSelectedNumbersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetSelectedNumbersAsync(int lineId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/RemoveCustomer", ReplyAction="http://tempuri.org/ICRMService/RemoveCustomerResponse")]
        System.Threading.Tasks.Task<Common.Dtoes.CustomerDto> RemoveCustomerAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/RemoveLine", ReplyAction="http://tempuri.org/ICRMService/RemoveLineResponse")]
        System.Threading.Tasks.Task<Common.Dtoes.LineDto> RemoveLineAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/UpdateCustomer", ReplyAction="http://tempuri.org/ICRMService/UpdateCustomerResponse")]
        System.Threading.Tasks.Task<Common.Dtoes.CustomerDto> UpdateCustomerAsync(Common.Dtoes.CustomerDto customer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICRMService/UpdateLine", ReplyAction="http://tempuri.org/ICRMService/UpdateLineResponse")]
        System.Threading.Tasks.Task<Common.Dtoes.LineDto> UpdateLineAsync(int lineId, Common.Dtoes.LineDto line);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICRMServiceChannel : Client.CRMServiceReference.ICRMService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CRMServiceClient : System.ServiceModel.ClientBase<Client.CRMServiceReference.ICRMService>, Client.CRMServiceReference.ICRMService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CRMServiceClient() : 
                base(CRMServiceClient.GetDefaultBinding(), CRMServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ICRMService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CRMServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(CRMServiceClient.GetBindingForEndpoint(endpointConfiguration), CRMServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CRMServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CRMServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CRMServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CRMServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CRMServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<Common.Dtoes.CustomerDto> AddCustomerAsync(Common.Dtoes.CustomerDto customer) {
            return base.Channel.AddCustomerAsync(customer);
        }
        
        public System.Threading.Tasks.Task<bool> AddFullLineAsync(Common.Dtoes.LineDto line, Common.Dtoes.PackageIncludeDto packageInclude, Common.Dtoes.SelectedNumberDto selectedNumber, Common.Dtoes.CustomerDto customer) {
            return base.Channel.AddFullLineAsync(line, packageInclude, selectedNumber, customer);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Common.Dtoes.CustomerDto>> GetAllCustomersAsync() {
            return base.Channel.GetAllCustomersAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<int>> GetCustomersIdsAsync() {
            return base.Channel.GetCustomersIdsAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Common.Dtoes.CustomerTypeDto>> GetCustomerTypesAsync() {
            return base.Channel.GetCustomerTypesAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Common.Dtoes.LineDto>> GetLineForCustomerAsync(int customerId) {
            return base.Channel.GetLineForCustomerAsync(customerId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Common.Dtoes.PackageDto>> GetPackagesAsync() {
            return base.Channel.GetPackagesAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetSelectedNumbersAsync(int lineId) {
            return base.Channel.GetSelectedNumbersAsync(lineId);
        }
        
        public System.Threading.Tasks.Task<Common.Dtoes.CustomerDto> RemoveCustomerAsync(int id) {
            return base.Channel.RemoveCustomerAsync(id);
        }
        
        public System.Threading.Tasks.Task<Common.Dtoes.LineDto> RemoveLineAsync(int id) {
            return base.Channel.RemoveLineAsync(id);
        }
        
        public System.Threading.Tasks.Task<Common.Dtoes.CustomerDto> UpdateCustomerAsync(Common.Dtoes.CustomerDto customer) {
            return base.Channel.UpdateCustomerAsync(customer);
        }
        
        public System.Threading.Tasks.Task<Common.Dtoes.LineDto> UpdateLineAsync(int lineId, Common.Dtoes.LineDto line) {
            return base.Channel.UpdateLineAsync(lineId, line);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICRMService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ICRMService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:57594/services/CRMService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return CRMServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ICRMService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return CRMServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ICRMService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_ICRMService,
        }
    }
}
